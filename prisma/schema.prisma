// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  password          String
  name              String?
  role              Role     @default(STUDENT)
  subscriptionType  String?
  subscriptionEndsAt DateTime?
  lastLoginAt       DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  enrollments    Enrollment[]
  orders         Order[]
  progress       Progress[]
  chatSessions   ChatSession[]
  certificates   Certificate[]
  auditLogs      AuditLog[]

  @@map("users")
}

model Course {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  description String?
  price       Decimal  @db.Decimal(10, 2)
  currency    String   @default("RUB")
  level       String
  duration    Int      // minutes
  imageUrl    String?
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  lessons       Lesson[]
  enrollments   Enrollment[]
  orderItems    OrderItem[]
  progress      Progress[]
  knowledgeBase KnowledgeBaseDoc[]

  @@map("courses")
}

model Lesson {
  id          String   @id @default(cuid())
  courseId    String
  title       String
  slug        String
  content     String
  videoUrl    String?
  duration    Int      // minutes
  order       Int
  isPublished Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course       Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  questions    Question[]
  progress     Progress[]
  chatSessions ChatSession[]

  @@unique([courseId, slug])
  @@map("lessons")
}

model Question {
  id        String   @id @default(cuid())
  lessonId  String
  question  String
  answer    String
  type      String   @default("text")
  order     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model Enrollment {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  enrolledAt   DateTime @default(now())
  completedAt  DateTime?
  progress     Float    @default(0)
  accessEndsAt DateTime?

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("enrollments")
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  type      String   // monthly, yearly
  status    String   // active, cancelled, expired
  startsAt  DateTime
  endsAt    DateTime
  price     Decimal  @db.Decimal(10, 2)
  currency  String   @default("RUB")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("subscriptions")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  totalAmount Decimal     @db.Decimal(10, 2)
  currency    String      @default("RUB")
  status      OrderStatus @default(PENDING)
  couponCode  String?
  discount    Decimal?    @db.Decimal(10, 2)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    OrderItem[]
  payments Payment[]

  @@map("orders")
}

model OrderItem {
  id       String  @id @default(cuid())
  orderId  String
  courseId String
  price    Decimal @db.Decimal(10, 2)
  currency String  @default("RUB")

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id              String        @id @default(cuid())
  orderId         String
  amount          Decimal       @db.Decimal(10, 2)
  currency        String        @default("RUB")
  status          PaymentStatus @default(PENDING)
  provider        String        // yookassa
  providerPaymentId String?
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Progress {
  id           String   @id @default(cuid())
  userId       String
  courseId     String
  lessonId     String
  completed    Boolean  @default(false)
  timeSpent    Int      @default(0) // seconds
  lastAccessed DateTime @default(now())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId, lessonId])
  @@map("progress")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  courseId  String?
  lessonId  String?
  title     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  course   Course?       @relation(fields: [courseId], references: [id], onDelete: SetNull)
  lesson   Lesson?       @relation(fields: [lessonId], references: [id], onDelete: SetNull)
  messages ChatMessage[]

  @@map("chat_sessions")
}

model ChatMessage {
  id            String   @id @default(cuid())
  sessionId     String
  role          String   // user, assistant
  content       String
  audioUrl      String?
  metadata      Json?
  createdAt     DateTime @default(now())

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("chat_messages")
}

model Certificate {
  id          String   @id @default(cuid())
  userId      String
  courseId    String
  certificateUrl String
  issuedAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("certificates")
}

model KnowledgeBaseDoc {
  id        String   @id @default(cuid())
  courseId  String?
  title     String
  content   String
  embedding Float[]
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course? @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@map("knowledge_base_docs")
}

model Coupon {
  id          String   @id @default(cuid())
  code        String   @unique
  discount    Decimal  @db.Decimal(5, 2) // percentage
  validFrom   DateTime
  validUntil  DateTime
  usageLimit  Int?
  usageCount  Int      @default(0)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("coupons")
}

model AuditLog {
  id        String   @id @default(cuid())
  userId    String?
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

enum Role {
  STUDENT
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
  REFUNDED
}
